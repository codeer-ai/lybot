name: CI

env:
  GOOGLE_API_KEY: "dummy-key-for-testing"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Backend Python checks
  backend-lint:
    name: Backend Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install dependencies
        run: |
          uv sync
          uv pip install ruff pyright
      
      - name: Run Ruff linter
        run: uv run ruff check .
      
      - name: Run Ruff formatter
        run: uv run ruff format --check .
      
      - name: Run Pyright type checker
        run: uv run pyright .

  # Backend tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: uv sync
      
      - name: Run tests
        run: |
          # Add pytest when tests are available
          # uv run pytest tests/
          echo "No tests found yet"
      
      - name: Test CLI entry point
        run: |
          uv run python main.py --help || true
      
      - name: Test API server startup
        run: |
          timeout 10s uv run python api.py || code=$?; if [[ $code -eq 124 ]]; then exit 0; else exit $code; fi

  # Frontend checks
  frontend-lint:
    name: Frontend Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint || true  # Allow lint to fail for now
      
      - name: Run TypeScript type check
        working-directory: frontend
        run: npx tsc --noEmit

  # Frontend build
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  # Integration test
  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [backend-lint, frontend-build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install backend dependencies
        run: uv sync
      
      - name: Start API server
        run: |
          uv run uvicorn api:app --host 0.0.0.0 --port 8000 &
          sleep 5  # Wait for server to start
      
      - name: Test API endpoints
        run: |
          # Test models endpoint
          curl -f http://localhost:8000/v1/models
          
          # Test chat endpoint
          curl -f -X POST http://localhost:8000/v1/chat/completions \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gemini-2.0-flash-thinking-exp-01-21",
              "messages": [{"role": "user", "content": "test"}],
              "stream": false
            }' || true  # Allow to fail due to API key

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "0"  # Don't fail the build
          severity: "CRITICAL,HIGH"